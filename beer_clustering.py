# -*- coding: utf-8 -*-
"""Beer clustering

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CdeH8xj4gFcYV6XKmHeK9DT1_Uul-klp

# Evaluating Clustering Performance Using Advanced Technique
"""

#examples taken from https://realpython.com/k-means-clustering-python/

import tarfile
import urllib

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from sklearn.metrics import silhouette_score, adjusted_rand_score
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import LabelEncoder, MinMaxScaler

"""Access to Drive"""

from google.colab import drive
drive.mount('/content/drive')

"""Navigate to the folder in drive where you want to work"""

# Commented out IPython magic to ensure Python compatibility.
!pwd  #show current path

#change floder
# %cd "/content/drive/MyDrive/Intelligent Systems/Project 2: Alcoholism"

!pwd  #show current path
!ls   #show files in current path

"""Link to dataset"""

#Read data set
df=pd.read_csv('beer_data_set.csv')
df.head()

df=df.drop(['Name', 'Style','Brewery','Description','key'], axis=1)
df

df.plot('Ave Rating', 'Sweet', kind ='scatter')

pd.plotting.scatter_matrix(df[['Ave Rating', 'Sweet', 'Bitter', 'Malty', 'Fruits']]);

from sklearn.decomposition import PCA

pca = PCA(n_components=4)
pca.fit(df)

df_2d = pca.transform(df)

df_2d = pd.DataFrame(df_2d)
df_2d.index = df.index
df_2d.columns = ['PC1','PC2','PC3','PC4']
df_2d.head()

pca.explained_variance_ratio_

components=pd.DataFrame(pca.components_)
components.columns=df.columns
components.index=['PCA1','PCA2','PCA3','PCA4']
components

df_2d.plot(
        kind='scatter',
        x='PC1',y='PC2',
        figsize=(16,8))

df_2d= df_2d.drop(['PC3', 'PC4'], axis=1)

df_2d[1]

from sklearn.cluster import KMeans   
kmeans = KMeans(n_clusters=5)
clusters = kmeans.fit(df)

df_2d['cluster'] = pd.Series(clusters.labels_, index=df_2d.index)

df_2d.plot(
        kind='scatter',
        x='PC1',y='PC2',
        c=df_2d.cluster.astype(np.float),
        figsize=(16,8))

kmeans = KMeans(
    n_clusters = 5,
    init="random",
    n_init=10,
    max_iter=300,
    random_state=42
)
kmeans.fit(df_2d)

kmeans.inertia_

# Final locations of the centroid
kmeans.cluster_centers_

# The number of iterations required to converge
kmeans.n_iter_

kmeans.labels_

sc_t = df_2d.T
plt.scatter(sc_t[0], sc_t[1], c = kmeans.labels_)

ari_kmeans = adjusted_rand_score(true_labels, kmeans.labels_)
ari_dbscan = adjusted_rand_score(true_labels, dbscan.labels_)

round(ari_kmeans, 2)

round(ari_dbscan, 2)

